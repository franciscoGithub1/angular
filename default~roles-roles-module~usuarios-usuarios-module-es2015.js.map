{"version":3,"sources":["webpack:///C:/Fidenslat/Ginger/ginger.client.src/node_modules/@matheo/datasource/fesm2015/matheo-datasource.js"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA+C;AACc;AACb;AACC;AACiG;AACtD;AAC+B;;AAE3H;AACA;AACA,cAAc,uFAAuF;AACrG;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,cAAc,KAAK;AACnB;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA,8BAA8B,KAAK;AACnC,8BAA8B,KAAK;AACnC;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,mCAAmC,KAAK;AACxC;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,iDAAiD,gBAAgB;AACjE,yBAAyB,gBAAgB;AACzC;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,eAAe,EAAE;AACjB;AACA,qCAAqC,IAAI,OAAO,qBAAqB;AACrE;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,sBAAsB,KAAK;AAC3B;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,gCAAgC,KAAK;AACrC;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,0BAA0B,KAAK;AAC/B;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,uFAAuF;AACrG;AACA,WAAW,EAAE;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,uFAAuF;AACrG;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,+BAA+B,gBAAgB;AAC/C;AACA;AACA,+BAA+B,gBAAgB;AAC/C;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,2BAA2B,gBAAgB;AAC3C;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,+BAA+B,gBAAgB,IAAI,QAAQ;AAC3D;AACA;AACA;;AAEA;AACA;AACA,cAAc,uFAAuF;AACrG;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,WAAW,EAAE;AACb;AACA,WAAW,EAAE;AACb;AACA,WAAW,EAAE;AACb;;AAEA;AACA;AACA,cAAc,uFAAuF;AACrG;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA;AACA,aAAa;AACb;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA,cAAc,sDAAO;AACrB;AACA,2BAA2B,EAAE;AAC7B;AACA,uBAAuB,EAAE;AACzB,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA,sBAAsB,oDAAK,GAAG;AAC9B,2BAA2B;AAC3B;AACA;AACA,gBAAgB;AAChB;AACA;AACA,eAAe,0DAAa;AAC5B,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,cAAc,0DAAa;AAC3B,cAAc,+CAAE,iBAAiB,kDAAO,yBAAyB,0DAAG;AACpE,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,uFAAuF;AACrG;AACA;AACA;AACA;AACA;AACA,4BAA4B,6DAAU;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,oDAAe;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,oDAAe,GAAG;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,4CAAO;AACvC;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA,qBAAqB;AACrB,SAAS;AACT;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,8CAA8C,EAAE,OAAO;AACvD;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,uCAAuC;AACvC;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,wCAAwC;AACxC;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,0CAA0C,QAAQ,iBAAiB;AACnE;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,0CAA0C,QAAQ,kBAAkB;AACpE;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAE;AACjB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA,4CAA4C,sDAAO;AACnD;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,eAAe,kDAAO;AACtB;AACA,QAAQ,kDAAK,kBAAkB,gEAAS,SAAS,2DAAI;AACrD,gBAAgB,2DAAI;AACpB;AACA,QAAQ,0DAAG;AACX,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA,SAAS;AACT;AACA,QAAQ,6DAAM;AACd,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA,gDAAgD,iEAAU;AAC1D,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA,mBAAmB,+CAAE;AACrB,SAAS;AACT;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,sBAAsB,2DAAI,KAAK,0DAAG;AAClC,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,+CAAE;AACjB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,2BAA2B,EAAE,kCAAkC,gEAAS,qBAAqB,0DAAG;AAChG,oBAAoB;AACpB;AACA,mCAAmC,gEAAS;AAC5C,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA,wCAAwC,gEAAS;AACjD,oBAAoB;AACpB;AACA,iCAAiC,0DAAG;AACpC,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA,yCAAyC,2EAAoB,mBAAmB,0DAAG;AACnF,oBAAoB;AACpB;AACA,kCAAkC,gEAAS;AAC3C,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA,uCAAuC,0DAAG;AAC1C,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA,yCAAyC,0DAAG;AAC5C,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA,uCAAuC,iEAAU;AACjD,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA,8CAA8C,6DAAM;AACpD,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,uFAAuF;AACrG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,uDAAS;AACrB;AACA;AACA;AACA;AACA,iBAAiB;AACjB,+BAA+B,+DAAiB;AAChD,iCAAiC,qEAAuB;AACxD,oDAAoD,kBAAkB,wEAAwE,cAAc,kBAAkB,4BAA4B,aAAa,sBAAsB,iBAAiB,WAAW,mBAAmB,qBAAqB,0BAA0B,mBAAmB,oCAAoC,gBAAgB,8BAA8B,gBAAgB,aAAa;AAC7c,aAAa;AACb;AACA;AACA;AACA;AACA,kBAAkB,OAAO,mDAAK,EAAE;AAChC,gBAAgB,OAAO,mDAAK,EAAE;AAC9B,mBAAmB,OAAO,mDAAK,EAAE;AACjC;;AAEA;AACA;AACA,cAAc,uFAAuF;AACrG;AACA;AACA;AACA;AACA,KAAK,OAAO,uDAAS;AACrB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,KAAK,OAAO,uDAAS;AACrB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,KAAK,OAAO,uDAAS;AACrB;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA,cAAc,uFAAuF;AACrG;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA,6BAA6B,4CAAO;AACpC;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,qCAAqC,gEAAS;AAC9C,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,uDAAS;AACrB;AACA,mFAAmF,ucAAuc,wBAAwB,gJAAgJ,mUAAmU,eAAe,2SAA2S,wBAAwB;AACv1C;AACA;AACA,iBAAiB;AACjB,+BAA+B,+DAAiB;AAChD,iCAAiC,qEAAuB;AACxD,aAAa;AACb;AACA;AACA;AACA,KAAK,OAAO,+DAAiB;AAC7B;AACA;AACA,kBAAkB,OAAO,mDAAK,EAAE;AAChC,gBAAgB,OAAO,mDAAK,EAAE;AAC9B,mBAAmB,OAAO,mDAAK,EAAE;AACjC,gBAAgB,OAAO,yDAAW,4BAA4B;AAC9D;;AAEA;AACA;AACA,cAAc,uFAAuF;AACrG;AACA;AACA;AACA;AACA,KAAK,OAAO,sDAAQ;AACpB,0BAA0B,4DAAY,EAAE,0EAAwB;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,0EAAwB;AAC5C;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA,cAAc,uFAAuF;AACrG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,gBAAgB,EAAE;AAClB;AACA;AACA,mCAAmC,0DAAG;AACtC,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,uFAAuF;AACrG;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA,cAAc,uFAAuF;AACrG;;AAEA;AACA;AACA,cAAc,uFAAuF;AACrG;;AAEA;AACA;AACA,cAAc,uFAAuF;AACrG;;AAE0N;;AAE1N,6C","file":"default~roles-roles-module~usuarios-usuarios-module-es2015.js","sourcesContent":["import { CommonModule } from '@angular/common';\nimport { MatProgressSpinnerModule } from '@angular/material';\nimport { DataSource } from '@angular/cdk/table';\nimport { isEmpty, merge, isEqual } from 'lodash';\nimport { ChangeDetectionStrategy, Component, Input, ViewEncapsulation, Directive, ChangeDetectorRef, HostBinding, NgModule } from '@angular/core';\nimport { combineLatest, merge as merge$1, of, BehaviorSubject, Subject, timer } from 'rxjs';\nimport { tap, catchError, distinctUntilChanged, filter, map, skipWhile, switchMap, take, takeUntil } from 'rxjs/operators';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Config Texts\n */\n/**\n * @return {?}\n */\nfunction emptyMsg() {\n    return 'No data available';\n}\n/**\n * @return {?}\n */\nfunction waitMsg() {\n    return 'Please wait...';\n}\n/**\n * @return {?}\n */\nfunction delayMsg() {\n    return 'The data is still loading...';\n}\n/**\n * @return {?}\n */\nfunction timeoutMsg() {\n    return 'Loading has timed out, please try again.';\n}\n/**\n * Debug Messages\n * @return {?}\n */\nfunction removingStream() {\n    return `Removing stream`;\n}\n/**\n * @param {?} name\n * @return {?}\n */\nfunction setValue(name) {\n    return `${name} setted:`;\n}\n/**\n * @param {?} name\n * @param {?} required\n * @return {?}\n */\nfunction srcAdding(name, required) {\n    return required\n        ? `Adding required '${name}' stream`\n        : `Adding optional '${name}' stream`;\n}\n/**\n * @param {?} name\n * @return {?}\n */\nfunction srcEmpty(name) {\n    return `Adding empty stream '${name}'`;\n}\n/**\n * @return {?}\n */\nfunction srcInvalid() {\n    return `Empty stream provided!`;\n}\n/**\n * @return {?}\n */\nfunction srcEmitted() {\n    return `Stream emitted:`;\n}\n/**\n * @return {?}\n */\nfunction isAutoStarting() {\n    return `DataSource starting automatically`;\n}\n/**\n * @param {?} length\n * @return {?}\n */\nfunction notAutoStarting(length) {\n    return (`DataSource not auto starting with ${length.optional}` +\n        ` optional and ${length.required} required streams`);\n}\n/**\n * @return {?}\n */\nfunction resolvedArgs() {\n    return 'Resolved request';\n}\n/**\n * @return {?}\n */\nfunction queryResponse() {\n    return 'Query response:';\n}\n/**\n * @return {?}\n */\nfunction queryTimeout() {\n    return 'Query timeout count:';\n}\n/**\n * @return {?}\n */\nfunction responseTotal() {\n    return 'Total returned:';\n}\n/**\n * @param {?} result\n * @return {?}\n */\nfunction responseSuccess(result) {\n    /** @type {?} */\n    const len = result.length;\n    return [`Response succeed with ${len} item${len === 1 ? '' : 's'}`, result];\n}\n/**\n * @param {?} errors\n * @return {?}\n */\nfunction responseError(errors) {\n    return ['Response failed', errors];\n}\n/**\n * Error Messages\n * @param {?} item\n * @return {?}\n */\nfunction addWhenRunning(item) {\n    return `Adding \"${item}\" after the DataSource is already running.`;\n}\n/**\n * @param {?} item\n * @return {?}\n */\nfunction rmWhenRunning(item) {\n    return `Trying to remove \"${item}\" after the DataSource is already running.`;\n}\n/**\n * @param {?} name\n * @return {?}\n */\nfunction nonNumeric(name) {\n    return 'Non numeric ${name} passed';\n}\n/**\n * @return {?}\n */\nfunction missingDataSourceInput() {\n    return 'mat-datasource must receive a dataSource input';\n}\n/**\n * @return {?}\n */\nfunction resException() {\n    return 'Exception processing the result';\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst defaultConfig = {\n    debug: false,\n    autoStart: true,\n    showErrors: true,\n    emptyMsg: emptyMsg,\n    waitMsg: waitMsg(),\n    delayMsg: delayMsg(),\n    timeoutMsg: timeoutMsg(),\n    progressMode: 'indeterminate'\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Logging Handler\n */\nclass DataSourceLogger {\n    /**\n     * @param {?} sourceName\n     */\n    constructor(sourceName) {\n        this.sourceName = sourceName;\n        /**\n         * Errors Collection\n         */\n        this._errors = {};\n    }\n    /**\n     * @param {?} config\n     * @return {?}\n     */\n    set config(config) {\n        this._config = config;\n    }\n    /**\n     * Error Management Methods\n     * @return {?}\n     */\n    getErrors() {\n        return this._errors;\n    }\n    /**\n     * @param {?} errorCode\n     * @param {?} error\n     * @return {?}\n     */\n    addError(errorCode, error) {\n        this._errors[errorCode] = typeof error === 'string' ? error : error.message;\n    }\n    /**\n     * @param {?} errorCode\n     * @param {?} error\n     * @return {?}\n     */\n    handleError(errorCode, error) {\n        this._config.errorHandler\n            ? this.addError(errorCode, this._config.errorHandler(error))\n            : this.addError(errorCode, error);\n    }\n    /**\n     * @param {?} errorCode\n     * @return {?}\n     */\n    hasError(errorCode) {\n        return this._errors.hasOwnProperty(errorCode);\n    }\n    /**\n     * @param {?=} force\n     * @return {?}\n     */\n    hasErrors(force = false) {\n        return ((this._config.showErrors || force) && !!Object.keys(this._errors).length);\n    }\n    /**\n     * @param {?} attempt\n     * @return {?}\n     */\n    getTimeoutError(attempt) {\n        switch (attempt) {\n            case 0:\n                return this._config.waitMsg;\n            case 1:\n                return this._config.delayMsg;\n            default:\n                throw new Error(this._config.timeoutMsg);\n        }\n    }\n    /**\n     * @return {?}\n     */\n    clearErrors() {\n        this._errors = {};\n    }\n    /**\n     * Debug Utils\n     * @param {?} truthy\n     * @param {?=} falsy\n     * @param {?=} condition\n     * @return {?}\n     */\n    // display a message according a condition\n    debug(truthy, falsy, condition = true) {\n        if (this._config.debug) {\n            if (condition) {\n                console.log(`${this.sourceName}:`, truthy);\n            }\n            else if (falsy) {\n                console.log(`${this.sourceName}:`, falsy);\n            }\n        }\n    }\n    // logs an object if debug mode is enabled\n    /**\n     * @param {?} message\n     * @param {?} obj\n     * @return {?}\n     */\n    print(message, obj) {\n        if (this._config.debug) {\n            console.log(`${this.sourceName}:`, message, obj);\n        }\n    }\n    // throw an error if the condition is truthy\n    /**\n     * @param {?} condition\n     * @param {?} message\n     * @return {?}\n     */\n    check(condition, message) {\n        if (condition) {\n            throw new Error(`${this.sourceName}: ${message}`);\n        }\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Constants\n * @type {?}\n */\nconst REQUIRED_INIT = 'required.init';\n/** @type {?} */\nconst TRIGGER_INIT = 'trigger.init';\n/** @type {?} */\nconst TRIGGER_REFRESH = 'trigger.refresh';\n/** @type {?} */\nconst TRIGGER_RELOAD = 'trigger.reload';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @template T\n */\nclass DataSourceStreamer {\n    /**\n     * @param {?} logger\n     */\n    constructor(logger) {\n        this.logger = logger;\n        // streams to listen\n        this.streams = [];\n        // micro optimization\n        this.length = {\n            required: 0,\n            optional: 0\n        };\n    }\n    /**\n     * @return {?}\n     */\n    get required() {\n        return this.streams.filter((/**\n         * @param {?} s\n         * @return {?}\n         */\n        s => s.required)).map((/**\n         * @param {?} s\n         * @return {?}\n         */\n        s => s.stream));\n    }\n    /**\n     * @return {?}\n     */\n    get optional() {\n        return this.streams.filter((/**\n         * @param {?} s\n         * @return {?}\n         */\n        s => !s.required)).map((/**\n         * @param {?} s\n         * @return {?}\n         */\n        s => s.stream));\n    }\n    /**\n     * @param {?} src\n     * @return {?}\n     */\n    add(src) {\n        this.logger.check(!src.stream, srcInvalid());\n        this.streams.push(src);\n        this.update();\n    }\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    remove(name) {\n        this.streams = this.streams.filter((/**\n         * @param {?} s\n         * @return {?}\n         */\n        s => s.name !== name));\n        this.update();\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    update() {\n        this.length = {\n            required: this.required.length,\n            optional: this.optional.length - 1 // remove trigger$\n        };\n    }\n    /**\n     * @param {?} defaults\n     * @param {?} overrides\n     * @return {?}\n     */\n    args(defaults, overrides) {\n        // merge all the argument sources\n        /** @type {?} */\n        const args = [\n            defaults,\n            ...this.streams\n                .sort((/**\n             * @param {?} a\n             * @param {?} b\n             * @return {?}\n             */\n            (a, b) => {\n                return (a.weight || 0) < (b.weight || 0) ? -1 : 1;\n            }))\n                .map((/**\n             * @param {?} s\n             * @return {?}\n             */\n            s => s.getter())),\n            overrides\n        ].filter((/**\n         * @param {?} v\n         * @return {?}\n         */\n        v => !isEmpty(v)));\n        // all the defaults and getters must complete a T object\n        return (/** @type {?} */ ((args.length > 1\n            ? args.reduce((/**\n             * @param {?} a\n             * @param {?} b\n             * @return {?}\n             */\n            (a, b) => merge({}, a, b)))\n            : args[0] || {})));\n    }\n    /**\n     * @return {?}\n     */\n    connect() {\n        return combineLatest(this.streams.some((/**\n         * @param {?} s\n         * @return {?}\n         */\n        s => s.required))\n            ? combineLatest(...this.required)\n            : of(REQUIRED_INIT), merge$1(...this.optional)).pipe(tap((/**\n         * @param {?} v\n         * @return {?}\n         */\n        v => this.logger.print(srcEmitted(), v))));\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @abstract\n * @template REQ, RAW, RES\n */\nclass MatDataSource extends DataSource {\n    /**\n     * DataSource.\n     */\n    constructor() {\n        super();\n        this._loading = true;\n        this._reloading = true;\n        this._loaded = false;\n        this._empty = true;\n        this._total = 0;\n        this._data = [];\n        this._progress = 0;\n        this._config = defaultConfig;\n        /**\n         * Control members for the datasource processing.\n         */\n        this.defaults = {};\n        this.overrides = {};\n        /**\n         * Error control vars.\n         */\n        this._logger = new DataSourceLogger(this.constructor.name);\n        /**\n         * Stream only used to trigger a refresh on the data.\n         * Can receive some Criteria overrides for a temporary update.\n         * It has to be used outside the datasource to prevent infinite loops.\n         */\n        this._trigger$ = new BehaviorSubject(TRIGGER_INIT);\n        /**\n         * Executions counter\n         */\n        this._triggered = 0;\n        /**\n         * Output Emitter to refresh the UI.\n         */\n        this._change$ = new BehaviorSubject({});\n        /**\n         * Registered streams\n         */\n        this._streams = new DataSourceStreamer(this._logger);\n        /**\n         * Disconnect internal observable.\n         */\n        this._disconnect$ = new Subject();\n        // initial config sync\n        this._logger.config = this._config;\n        // listen the internal trigger\n        this.addOptional({\n            stream: this._trigger$,\n            getter: (/**\n             * @return {?}\n             */\n            () => ({}))\n        });\n    }\n    /**\n     * State to control outside behavior like css classes and components.\n     * Updated by pre/postQuery to show/hide the loading overlay and empty message.\n     * @return {?}\n     */\n    get isLoading() {\n        return this._loading;\n    }\n    /**\n     * @return {?}\n     */\n    get isLoaded() {\n        return this._loaded;\n    }\n    /**\n     * @return {?}\n     */\n    get isEmpty() {\n        return this._empty;\n    }\n    /**\n     * Number used to calculate the pagination length.\n     * Updated after the rawResult method according to the response data.\n     * @return {?}\n     */\n    get total() {\n        return this._total;\n    }\n    /**\n     * @return {?}\n     */\n    get data() {\n        return this._data;\n    }\n    /**\n     * Number used to calculate the loading progress.\n     * Updated while loading the query and triggering change$.\n     * @return {?}\n     */\n    get progress() {\n        return this._progress;\n    }\n    /**\n     * Output message getter.\n     * @return {?}\n     */\n    get outputMsg() {\n        return this._outputMsg;\n    }\n    /**\n     * Accessors\n     * @return {?}\n     */\n    get args() {\n        return this.arguments || ((/** @type {?} */ ({})));\n    }\n    /**\n     * @return {?}\n     */\n    get progressMode() {\n        return this._config.progressMode;\n    }\n    /**\n     * @return {?}\n     */\n    get change$() {\n        return this._change$;\n    }\n    /**\n     * @return {?}\n     */\n    get hasErrors() {\n        return this._logger.hasErrors(true);\n    }\n    /**\n     * @return {?}\n     */\n    get getErrors() {\n        return this._logger.getErrors();\n    }\n    /**\n     * Setters\n     * @return {?}\n     */\n    // config settings\n    get config() {\n        return this._config;\n    }\n    /**\n     * @param {?} config\n     * @return {?}\n     */\n    set config(config) {\n        this._config = Object.assign({}, this._config, config);\n        this._logger.config = this._config;\n    }\n    /**\n     * Streams\n     * @param {?} args\n     * @return {?}\n     */\n    addArguments(args) {\n        this.defaults = Object.assign({}, this.defaults, args);\n    }\n    /**\n     * @param {?} src\n     * @return {?}\n     */\n    addRequired(src) {\n        this._logger.check(this._triggered, addWhenRunning(src.name || src.stream));\n        this._logger.debug(srcAdding(src.name, true), srcEmpty(src.name), src.stream);\n        this._streams.add(Object.assign({}, src, { required: true }));\n    }\n    /**\n     * @param {?} src\n     * @return {?}\n     */\n    addOptional(src) {\n        this._logger.check(this._triggered, addWhenRunning(src.name || src.stream));\n        this._logger.debug(srcAdding(src.name, false), srcEmpty(src.name), src.stream);\n        this._streams.add(Object.assign({}, src, { required: false }));\n    }\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    remStream(name) {\n        this._logger.check(this._triggered, rmWhenRunning(name));\n        this._logger.print(removingStream(), name);\n        this._streams.remove(name);\n    }\n    /**\n     * Triggers\n     * @param {?=} overrides\n     * @return {?}\n     */\n    refresh(overrides = {}) {\n        this.overrides = overrides;\n        this._trigger$.next(TRIGGER_REFRESH);\n    }\n    /**\n     * @return {?}\n     */\n    reload() {\n        if (this._loaded) {\n            this.overrides = { forceReload: true };\n        }\n        this._reloading = true;\n        this._trigger$.next(TRIGGER_RELOAD);\n    }\n    /**\n     * Data processing that can be completely customized.\n     * @param {?} args\n     * @return {?}\n     */\n    reqArguments(args) {\n        return args;\n    }\n    /**\n     * Data Fetching Methods\n     * @private\n     * @param {?} streamed\n     * @return {?}\n     */\n    _blockStart(streamed) {\n        // check if it's not configured to start after the initial optional stream\n        /** @type {?} */\n        const block = !this._config.autoStart && streamed[1] === TRIGGER_INIT;\n        if (this._triggered === 1) {\n            this._logger.debug(isAutoStarting(), notAutoStarting(this._streams.length), !block);\n        }\n        if (block) {\n            this._loading = false;\n        }\n        return block;\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _getArgs() {\n        // merge all the getters outputs\n        this.arguments = this._streams.args(this.defaults, this.overrides);\n        this.overrides = {};\n        this._logger.print(resolvedArgs(), this.arguments);\n        // TODO consider any edge case with forceReload\n        delete this.arguments.forceReload;\n        return of(this.arguments);\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _isEqual() {\n        return (/**\n         * @param {?} prev\n         * @param {?} curr\n         * @return {?}\n         */\n        (prev, curr) => !this._reloading && isEqual(prev, curr));\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _preQuery() {\n        // state update\n        this._loading = true;\n        this._reloading = false;\n        this._outputMsg = '';\n        this._logger.clearErrors();\n        this._change$.next({});\n    }\n    /**\n     * @private\n     * @param {?} args\n     * @return {?}\n     */\n    _execQuery(args) {\n        /** @type {?} */\n        const query = this.rawFetch(args);\n        return merge$1(query, \n        // timers check\n        timer(5000, 8000).pipe(takeUntil(query), take(3) // 5s, 13s, 21s\n        )).pipe(take(3), \n        // delay check\n        tap((/**\n         * @param {?} val\n         * @return {?}\n         */\n        val => {\n            if (typeof val !== 'number') {\n                this._logger.print(queryResponse(), val);\n            }\n            else {\n                this._logger.print(queryTimeout(), val);\n                try {\n                    this._outputMsg = this._logger.getTimeoutError(val);\n                }\n                catch (e) {\n                    this._logger.addError('timeout', e.message);\n                    this._loading = false;\n                }\n                this._change$.next({});\n            }\n        })), \n        // discard timer result\n        filter((/**\n         * @param {?} result\n         * @return {?}\n         */\n        result => typeof result !== 'number')), catchError((/**\n         * @param {?} err\n         * @return {?}\n         */\n        err => {\n            // isolate query error\n            this._logger.handleError('query', err);\n            return of(this.rawDefault());\n        })));\n    }\n    /**\n     * @private\n     * @param {?} res\n     * @return {?}\n     */\n    _updateTotal(res) {\n        if (!this.hasErrors) {\n            // microtask as workaround for change detection\n            this.rawTotal(res)\n                .pipe(take(1), tap((/**\n             * @param {?} total\n             * @return {?}\n             */\n            total => this._logger.print(responseTotal(), total))))\n                .subscribe((/**\n             * @param {?} total\n             * @return {?}\n             */\n            total => (this._total = total)));\n        }\n    }\n    /**\n     * @private\n     * @param {?} res\n     * @return {?}\n     */\n    _postQuery(res) {\n        /** @type {?} */\n        const hasErrors = this.hasErrors;\n        this._data = !hasErrors ? this.rawResult(res) : [];\n        this._logger.debug(responseSuccess(this._data), responseError(this.getErrors), !hasErrors);\n        this._empty = !this._data || !this._data.length;\n        if (!hasErrors && this._empty) {\n            this._outputMsg = this._config.emptyMsg();\n        }\n        this._loaded = !hasErrors;\n        this._loading = false;\n        this._change$.next({});\n        return this._data;\n    }\n    /**\n     * @private\n     * @param {?} err\n     * @return {?}\n     */\n    _processException(err) {\n        this._logger.print(resException(), err);\n        return of(false);\n    }\n    /**\n     * Data API\n     * @return {?}\n     */\n    connect() {\n        return (/** @type {?} */ (this._streams.connect().pipe(takeUntil(this._disconnect$), tap((/**\n         * @return {?}\n         */\n        () => this._triggered++)), skipWhile((/**\n         * @param {?} val\n         * @return {?}\n         */\n        val => this._blockStart(val))), switchMap((/**\n         * @return {?}\n         */\n        () => this._getArgs())), map((/**\n         * @param {?} req\n         * @return {?}\n         */\n        req => this.reqArguments(req))), distinctUntilChanged(this._isEqual()), tap((/**\n         * @return {?}\n         */\n        () => this._preQuery())), switchMap((/**\n         * @param {?} req\n         * @return {?}\n         */\n        req => this._execQuery(req))), tap((/**\n         * @param {?} raw\n         * @return {?}\n         */\n        raw => this._updateTotal(raw))), map((/**\n         * @param {?} raw\n         * @return {?}\n         */\n        raw => this._postQuery(raw))), catchError((/**\n         * @param {?} err\n         * @return {?}\n         */\n        err => this._processException(err))), filter((/**\n         * @param {?} res\n         * @return {?}\n         */\n        res => typeof res !== 'boolean')))));\n    }\n    /**\n     * @return {?}\n     */\n    disconnect() {\n        this._trigger$.complete();\n        this._change$.complete();\n        this._disconnect$.next();\n        this._disconnect$.complete();\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @template REQ, RAW, RES\n */\nclass DataSourceContainer {\n    constructor() {\n        this.diameter = 40;\n        this.strokeWidth = 5;\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        this._validateSource();\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _validateSource() {\n        if (!this.dataSource) {\n            throw Error(missingDataSourceInput());\n        }\n    }\n}\nDataSourceContainer.decorators = [\n    { type: Component, args: [{\n                selector: 'mat-datasource',\n                template: \"<div class=\\\"mat-datasource-container\\\">\\n  <div [attr.hidden]=\\\"dataSource.isLoading || dataSource.isEmpty ? '' : null\\\">\\n    <ng-content select=\\\"mat-table,table\\\"></ng-content>\\n  </div>\\n\\n  <mat-datasource-overlay [dataSource]=\\\"dataSource\\\" [diameter]=\\\"diameter\\\" [strokeWidth]=\\\"strokeWidth\\\">\\n    <ng-content select=\\\"mat-datasource-empty\\\" ngProjectAs=\\\"mat-datasource-empty\\\"></ng-content>\\n    <ng-content select=\\\"mat-datasource-error\\\" ngProjectAs=\\\"mat-datasource-error\\\"></ng-content>\\n    <ng-content select=\\\"mat-datasource-loading\\\" ngProjectAs=\\\"mat-datasource-loading\\\"></ng-content>\\n  </mat-datasource-overlay>\\n</div>\\n\\n<div [attr.hidden]=\\\"dataSource.isLoading || dataSource.isEmpty ? '' : null\\\">\\n  <ng-content></ng-content>\\n</div>\\n\",\n                host: {\n                    class: 'mat-datasource'\n                },\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                styles: [\".mat-datasource-container{position:relative}\", \".mat-datasource-empty,.mat-datasource-error,.mat-datasource-loading{display:block;text-align:center}\", \".mat-datasource-overlay{display:flex;flex-direction:column;min-height:120px;width:100%;align-items:center;place-content:center}.mat-datasource-overlay>*{margin-bottom:15px}.mat-datasource-overlay>:last-child{margin-bottom:0}.mat-datasource-overlay:empty{margin-bottom:0;min-height:0}\"]\n            }] }\n];\n/** @nocollapse */\nDataSourceContainer.ctorParameters = () => [];\nDataSourceContainer.propDecorators = {\n    dataSource: [{ type: Input }],\n    diameter: [{ type: Input }],\n    strokeWidth: [{ type: Input }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass DataSourceEmpty {\n}\nDataSourceEmpty.decorators = [\n    { type: Directive, args: [{\n                selector: 'mat-datasource-empty',\n                host: {\n                    class: 'mat-datasource-empty'\n                }\n            },] }\n];\nclass DataSourceError {\n}\nDataSourceError.decorators = [\n    { type: Directive, args: [{\n                selector: 'mat-datasource-error',\n                host: {\n                    class: 'mat-datasource-error'\n                }\n            },] }\n];\nclass DataSourceLoading {\n}\nDataSourceLoading.decorators = [\n    { type: Directive, args: [{\n                selector: 'mat-datasource-loading',\n                host: {\n                    class: 'mat-datasource-loading'\n                }\n            },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @template REQ, RAW, RES\n */\nclass DataSourceOverlay {\n    /**\n     * @param {?} cdr\n     */\n    constructor(cdr) {\n        this.cdr = cdr;\n        this.onDestroy = new Subject();\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        this._validateSource();\n        // listen source changes\n        this.dataSource.change$.pipe(takeUntil(this.onDestroy)).subscribe((/**\n         * @return {?}\n         */\n        () => {\n            this._display =\n                this.dataSource.isLoading ||\n                    this.dataSource.hasErrors ||\n                    this.dataSource.isEmpty\n                    ? 'flex'\n                    : 'none';\n            this.cdr.markForCheck();\n        }));\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _validateSource() {\n        if (!this.dataSource) {\n            throw Error(missingDataSourceInput());\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this.onDestroy.next();\n        this.onDestroy.complete();\n    }\n}\nDataSourceOverlay.decorators = [\n    { type: Component, args: [{\n                selector: 'mat-datasource-overlay',\n                template: \"<ng-container *ngIf=\\\"dataSource.isLoading then loading; else loaded\\\"></ng-container>\\n\\n<ng-template #loading>\\n  <mat-progress-spinner\\n    [mode]=\\\"dataSource.progressMode\\\"\\n    [value]=\\\"dataSource.progress\\\"\\n    [diameter]=\\\"diameter\\\"\\n    [strokeWidth]=\\\"strokeWidth\\\"\\n  ></mat-progress-spinner>\\n\\n  <div #out>\\n    <ng-content select=\\\"mat-datasource-loading\\\"></ng-content>\\n  </div>\\n  <ng-container *ngIf=\\\"!out.childNodes.length\\\">\\n    <mat-datasource-loading *ngIf=\\\"dataSource.outputMsg\\\">{{ dataSource.outputMsg }}</mat-datasource-loading>\\n  </ng-container>\\n</ng-template>\\n\\n<ng-template #loaded>\\n  <ng-container *ngIf=\\\"dataSource.hasErrors then errors; else empty\\\"></ng-container>\\n\\n  <ng-template #errors>\\n    <div class=\\\"mat-datasource-overlay\\\" #err>\\n      <ng-content select=\\\"mat-datasource-error\\\"></ng-content>\\n    </div>\\n    <ng-container *ngIf=\\\"!err.childNodes.length\\\">\\n      <mat-datasource-error *ngFor=\\\"let error of dataSource.getErrors | keyvalue\\\">{{ error.value }}</mat-datasource-error>\\n    </ng-container>\\n  </ng-template>\\n\\n  <ng-template #empty>\\n    <div class=\\\"mat-datasource-overlay\\\" #emp>\\n      <ng-content select=\\\"mat-datasource-empty\\\"></ng-content>\\n    </div>\\n    <ng-container *ngIf=\\\"!emp.childNodes.length\\\">\\n      <mat-datasource-empty>{{ dataSource.outputMsg }}</mat-datasource-empty>\\n    </ng-container>\\n  </ng-template>\\n</ng-template>\\n\",\n                host: {\n                    class: 'mat-datasource-overlay'\n                },\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush\n            }] }\n];\n/** @nocollapse */\nDataSourceOverlay.ctorParameters = () => [\n    { type: ChangeDetectorRef }\n];\nDataSourceOverlay.propDecorators = {\n    dataSource: [{ type: Input }],\n    diameter: [{ type: Input }],\n    strokeWidth: [{ type: Input }],\n    _display: [{ type: HostBinding, args: ['style.display',] }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatDataSourceModule {\n}\nMatDataSourceModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [CommonModule, MatProgressSpinnerModule],\n                declarations: [\n                    DataSourceContainer,\n                    DataSourceEmpty,\n                    DataSourceError,\n                    DataSourceLoading,\n                    DataSourceOverlay\n                ],\n                exports: [\n                    MatProgressSpinnerModule,\n                    DataSourceContainer,\n                    DataSourceEmpty,\n                    DataSourceError,\n                    DataSourceLoading\n                ]\n            },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @abstract\n * @template REQ, RAW, RES\n */\nclass ReactiveDataSource extends MatDataSource {\n    constructor() {\n        super(...arguments);\n        this._pageIndex = 0;\n        this._pageSize = 10;\n    }\n    /**\n     * Pagination Settings\n     * @return {?}\n     */\n    get pageIndex() {\n        return this._pageIndex;\n    }\n    /**\n     * @param {?} size\n     * @return {?}\n     */\n    set pageIndex(size) {\n        this._logger.check(isNaN(Number(size)), nonNumeric('pageIndex'));\n        this._logger.print(setValue('PageIndex'), Number(size));\n        this._pageIndex = Number(size);\n    }\n    /**\n     * @return {?}\n     */\n    get pageSize() {\n        return this._pageSize;\n    }\n    /**\n     * @param {?} size\n     * @return {?}\n     */\n    set pageSize(size) {\n        if (size) {\n            this._logger.check(isNaN(Number(size)), nonNumeric('pageSize'));\n            this._logger.print(setValue('PageSize'), Number(size));\n            this._pageSize = Number(size);\n        }\n    }\n    // be sure the paginator's view has been initialized\n    /**\n     * @param {?} paginator\n     * @param {?} getter\n     * @return {?}\n     */\n    setPaginator(paginator, getter) {\n        this.addOptional({\n            name: 'MatPaginator',\n            stream: paginator.page,\n            getter: getter(this.pageSize)\n        });\n    }\n    // sort changes emitted will trigger an update\n    /**\n     * @param {?} sort\n     * @param {?} getter\n     * @return {?}\n     */\n    setSort(sort, getter) {\n        this.addOptional({\n            name: 'MatSort',\n            stream: sort.sortChange,\n            getter\n        });\n    }\n    /**\n     * Attachs an autocompleter with this data source filtered. Note that\n     * the stream provided will be accessed during change detection and should not directly change\n     * values that are bound in template views.\n     * @return {?} Observable that emits a new value when the data changes.\n     */\n    attach() {\n        return this.connect().pipe(map((/**\n         * @param {?} res\n         * @return {?}\n         */\n        res => this.resFilter(res))));\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Premade Getters\n * @param {?} paginator\n * @return {?}\n */\nfunction getterPaginator(paginator) {\n    return (/**\n     * @param {?} pageSize\n     * @return {?}\n     */\n    (pageSize) => {\n        // : DataSourceGetter<T>\n        return (/**\n         * @return {?}\n         */\n        () => ({\n            pageIndex: paginator ? paginator.pageIndex : 0,\n            pageSize: paginator ? paginator.pageSize : pageSize\n        }));\n    });\n}\n/**\n * @param {?} sorter\n * @return {?}\n */\nfunction getterSort(sorter) {\n    // DataSourceGetter<T>\n    return (/**\n     * @return {?}\n     */\n    () => {\n        return sorter && sorter.active\n            ? {\n                orderBy: sorter.active,\n                orderDir: sorter.direction || undefined\n            }\n            : {};\n    });\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { MatDataSourceModule, MatDataSource, DataSourceLogger, ReactiveDataSource, DataSourceEmpty, DataSourceError, DataSourceLoading, getterPaginator, getterSort, DataSourceContainer as ɵa, DataSourceOverlay as ɵb };\n\n//# sourceMappingURL=matheo-datasource.js.map"],"sourceRoot":""}